 1.0  ->  About the bot
 2.0  ->  Getting the source code
 3.0  ->  Tremded Parser
 4.0  ->  Credits


(1.0) About the bot
================================================================================
River-Tam is an IRC Bot written in Haskell.

Features:
 * Access System (Levels: Master, User, Peon, Mute)
 * Tremded Parser (Send a message to IRC from the server and vice versa)
 * Flame/Love - What can be more humiliating than having an irc bot insult you?
 * Tremulous Master Polling - Find tremulous players, list online clan-players,
     get current scores from a server and all within a second.
 * Clanwars Tracker - Saves clangames to a database, Generates a variety of
    statistics. Clangames are easily added with a brief command in irc.
 * Countdowns - Create countdowns to special events.
 * Memos - Send a message to someone when any signs of life is seen.
 * Written in Haskell - Makes the bot very stable.


(2.0) Getting the source code
================================================================================
$ git clone git://git.mercenariesguild.net/rivertam.git
$ cd rivertam


(3.0) Tremded Parser
================================================================================
Send message from IRC to In-Game:
 Syntax:
  (Specified IRC Channel)
  !trem <message>
 Example:
  !trem Hello! I love River-Tam!!!
 Output:
  [IRC] Nickname: Hello! I love River-Tam!!!

Send message from In-Game to IRC:
 Syntax:
  (In-Game)
  irc: <message>
 Example:
  irc: Hello! I love River-Tam too, but leave me alone! I'm playing!
 Output:
  <[T] Nickname> Hello! I love River-Tam too, but leave me alone! I'm playing!

NOTE: You must set up a fifo before using trem -> irc!

Decide some arbitrary path for the fifo, here I'm going to use /tmp/fifo.
You need to enter the path to the fifo in river.conf also.

 $ mkfifo /tmp/fifo

NOTE: You must have both read AND write permission to the pipe.

When you later start your tremded you need to pipe it's output to the fifo, specifically stderr.
In this example we pipe both stdout and stderr however:

 $ tremded.x86 &> /tmp/fifo

NOTE: If for some reason you quit river-tam and the server writes something to the fifo the server will crash.
There's an easy workaround, keep the fifo open in an external program without writing anything to it.
Here's a program like that written in C:

//Usage: ./program /path/to/fifo
#include <stdio.h>
int main(int argc, char ** argv)
{
	FILE * fx = NULL;
	int null;
	if(argc > 1) {
		fx = fopen(argv[1], "r");
	} else {
		printf("Missing Argument\n");
	}
	scanf("%d", &null);
	if(fx) fclose(fx);
	return 0;
}


(4.0) Credits
================================================================================
Programmer:
 Christoffer Ã–jeling "Cadynum"  - <cadynum@gmail.com>

Thanks to:
 Twey            - Haskell support
 Raf             - Helping me learn Haskell
 OddRaw          - Bughunting
 MG & benmachine - git repository

Have fun, and for the love of science do NOT abuse pingall! :)
